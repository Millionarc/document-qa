{"id":"8e63473b-de00-4c4b-8ce4-a7a66292c943","data":{"nodes":[{"id":"Prompt-OKBJQ","type":"genericNode","position":{"x":765.0284216354017,"y":189.40090215947407},"data":{"type":"Prompt","node":{"template":{"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from langchain_core.prompts import PromptTemplate\n\nfrom langflow.custom import CustomComponent\nfrom langflow.field_typing import Prompt, TemplateField, Text\n\n\nclass PromptComponent(CustomComponent):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n\n    def build_config(self):\n        return {\n            \"template\": TemplateField(display_name=\"Template\"),\n            \"code\": TemplateField(advanced=True),\n        }\n\n    def build(\n        self,\n        template: Prompt,\n        **kwargs,\n    ) -> Text:\n        from langflow.base.prompts.utils import dict_values_to_string\n\n        prompt_template = PromptTemplate.from_template(Text(template))\n        kwargs = dict_values_to_string(kwargs)\n        kwargs = {k: \"\\n\".join(v) if isinstance(v, list) else v for k, v in kwargs.items()}\n        try:\n            formated_prompt = prompt_template.format(**kwargs)\n        except Exception as exc:\n            raise ValueError(f\"Error formatting prompt: {exc}\") from exc\n        self.status = f'Prompt:\\n\"{formated_prompt}\"'\n        return formated_prompt\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"template":{"type":"prompt","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"You are now a helpful medical assistant designed to aid users in identifying medical issues and suggesting steps to manage them. Your role is to analyze user inputs about their health concerns and offer informative, supportive advice. When responding, follow this structured input and output format: Input Format for Users: 1. Symptoms: Users should describe their symptoms clearly and thoroughly. 2. Duration: Users need to specify how long they have been experiencing these symptoms. 3. Additional Information: This includes any relevant personal health history, recent exposures, changes in lifestyle, current medications, and any other context that might affect their condition. 4. Image (if applicable): If thereâ€™s a visible manifestation of their issue (like a rash or swelling), users can upload an image to provide visual context. Your Response Should Include: 1. Identification of the Issue (if possible from the description): Based on the symptoms and duration, suggest possible medical issues. 2. Severity and Urgency: Assess and communicate the potential severity of the symptoms and the urgency with which medical attention might be needed. 3. Duration the Symptoms May Last: Provide an estimate on how long the symptoms might persist, based on the identified issue or similar conditions. 4. Self-Care Recommendations: Suggest actionable steps the user can take at home to ease symptoms or facilitate recovery. This could include lifestyle adjustments, over-the-counter medications, or simple home remedies. 5. Guidance on Daily Activities: Advise whether the symptoms are severe enough that the user should consider taking time off from work or school. 6. When to See a Doctor: Clearly state if and when it would be advisable to seek professional medical evaluation, particularly if symptoms are severe, worsening, or persist longer than typical for the suspected issue. 7. Reminder of Limitations: Remind users that the advice provided is based on the information they submitted and is not professional medical advice. Users should seek direct medical evaluation for a definitive diagnosis and treatment, especially for serious or life-threatening conditions. Additional Guidelines for Your Responses: - Empathy and Support: Always communicate in a tone that is empathetic and supportive, recognizing the concerns and anxieties that health issues can provoke. - Privacy and Sensitivity: Ensure that responses respect user privacy and handle sensitive health information with care. - Encourage Professional Help: Consistently encourage users to seek professional medical advice for a definitive diagnosis and treatment, especially if the situation could potentially be serious.\nAnalyze the following symptoms: {symptoms} for {duration}, with a severity of {severity}. Additional info: {additional_info}\n","fileTypes":[],"file_path":"","password":false,"name":"template","display_name":"Template","advanced":false,"input_types":["Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false},"_type":"CustomComponent","symptoms":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"symptoms","display_name":"symptoms","advanced":false,"input_types":["Document","Record","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"duration":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"duration","display_name":"duration","advanced":false,"input_types":["Document","Record","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"severity":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"severity","display_name":"severity","advanced":false,"input_types":["Document","Record","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"},"additional_info":{"field_type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"additional_info","display_name":"additional_info","advanced":false,"input_types":["Document","Record","Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false,"type":"str"}},"description":"Create a prompt template with dynamic variables.","icon":"prompts","is_input":null,"is_output":null,"is_composition":null,"base_classes":["object","str","Text"],"name":"Prompt","display_name":"Prompt","documentation":"","custom_fields":{"template":["symptoms","duration","severity","additional_info"]},"output_types":["Text"],"full_path":null,"field_formatters":{},"frozen":false,"field_order":[],"beta":false,"error":null},"id":"Prompt-OKBJQ","description":"Create a prompt template with dynamic variables.","display_name":"Prompt"},"selected":false,"width":384,"height":665,"positionAbsolute":{"x":765.0284216354017,"y":189.40090215947407},"dragging":false},{"id":"OpenAIModel-QthHW","type":"genericNode","position":{"x":1162.4646736446748,"y":183.14177458533015},"data":{"type":"OpenAIModel","node":{"template":{"input_value":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"input_value","display_name":"Input","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"],"value":""},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Optional\n\nfrom langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.constants import STREAM_INFO_TEXT\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import MODEL_NAMES\nfrom langflow.field_typing import NestedDict, Text\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n\n    field_order = [\n        \"max_tokens\",\n        \"model_kwargs\",\n        \"model_name\",\n        \"openai_api_base\",\n        \"openai_api_key\",\n        \"temperature\",\n        \"input_value\",\n        \"system_message\",\n        \"stream\",\n    ]\n\n    def build_config(self):\n        return {\n            \"input_value\": {\"display_name\": \"Input\"},\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"advanced\": True,\n                \"info\": \"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"advanced\": True,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"advanced\": False,\n                \"options\": MODEL_NAMES,\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"advanced\": True,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"info\": \"The OpenAI API Key to use for the OpenAI model.\",\n                \"advanced\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"advanced\": False,\n                \"value\": 0.1,\n            },\n            \"stream\": {\n                \"display_name\": \"Stream\",\n                \"info\": STREAM_INFO_TEXT,\n                \"advanced\": True,\n            },\n            \"system_message\": {\n                \"display_name\": \"System Message\",\n                \"info\": \"System message to pass to the model.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Text,\n        openai_api_key: str,\n        temperature: float,\n        model_name: str = \"gpt-4o\",\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        stream: bool = False,\n        system_message: Optional[str] = None,\n    ) -> Text:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        if openai_api_key:\n            api_key = SecretStr(openai_api_key)\n        else:\n            api_key = None\n\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature,\n        )\n\n        return self.get_chat_result(output, stream, input_value, system_message)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"max_tokens":{"type":"int","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":256,"fileTypes":[],"file_path":"","password":false,"name":"max_tokens","display_name":"Max Tokens","advanced":true,"dynamic":false,"info":"The maximum number of tokens to generate. Set to 0 for unlimited tokens.","load_from_db":false,"title_case":false},"model_kwargs":{"type":"NestedDict","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":{},"fileTypes":[],"file_path":"","password":false,"name":"model_kwargs","display_name":"Model Kwargs","advanced":true,"dynamic":false,"info":"","load_from_db":false,"title_case":false},"model_name":{"type":"str","required":false,"placeholder":"","list":true,"show":true,"multiline":false,"value":"gpt-4o","fileTypes":[],"file_path":"","password":false,"options":["gpt-4o","gpt-4-turbo","gpt-4-turbo-preview","gpt-3.5-turbo","gpt-3.5-turbo-0125"],"name":"model_name","display_name":"Model Name","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"]},"openai_api_base":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"openai_api_base","display_name":"OpenAI API Base","advanced":true,"dynamic":false,"info":"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.","load_from_db":false,"title_case":false,"input_types":["Text"]},"openai_api_key":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":true,"name":"openai_api_key","display_name":"OpenAI API Key","advanced":false,"dynamic":false,"info":"The OpenAI API Key to use for the OpenAI model.","load_from_db":true,"title_case":false,"input_types":["Text"],"value":"gpt"},"stream":{"type":"bool","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":false,"fileTypes":[],"file_path":"","password":false,"name":"stream","display_name":"Stream","advanced":true,"dynamic":false,"info":"Stream the response from the model. Streaming works only in Chat.","load_from_db":false,"title_case":false},"system_message":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"system_message","display_name":"System Message","advanced":true,"dynamic":false,"info":"System message to pass to the model.","load_from_db":false,"title_case":false,"input_types":["Text"]},"temperature":{"type":"float","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":0.1,"fileTypes":[],"file_path":"","password":false,"name":"temperature","display_name":"Temperature","advanced":false,"dynamic":false,"info":"","rangeSpec":{"step_type":"float","min":-1,"max":1,"step":0.1},"load_from_db":false,"title_case":false},"_type":"CustomComponent"},"description":"Generates text using OpenAI LLMs.","icon":"OpenAI","base_classes":["object","str","Text"],"display_name":"OpenAI","documentation":"","custom_fields":{"input_value":null,"openai_api_key":null,"temperature":null,"model_name":null,"max_tokens":null,"model_kwargs":null,"openai_api_base":null,"stream":null,"system_message":null},"output_types":["Text"],"field_formatters":{},"frozen":false,"field_order":["max_tokens","model_kwargs","model_name","openai_api_base","openai_api_key","temperature","input_value","system_message","stream"],"beta":false,"name":"OpenAI"},"id":"OpenAIModel-QthHW"},"selected":false,"width":384,"height":563,"positionAbsolute":{"x":1162.4646736446748,"y":183.14177458533015},"dragging":false},{"id":"ChatOutput-LdF6G","type":"genericNode","position":{"x":1548.5527954139595,"y":180.56390146461155},"data":{"type":"ChatOutput","node":{"template":{"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Optional, Union\n\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.field_typing import Text\nfrom langflow.schema import Record\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"ChatOutput\"\n\n    def build(\n        self,\n        sender: Optional[str] = \"Machine\",\n        sender_name: Optional[str] = \"AI\",\n        input_value: Optional[str] = None,\n        session_id: Optional[str] = None,\n        return_record: Optional[bool] = False,\n        record_template: Optional[str] = \"{text}\",\n    ) -> Union[Text, Record]:\n        return super().build_with_record(\n            sender=sender,\n            sender_name=sender_name,\n            input_value=input_value,\n            session_id=session_id,\n            return_record=return_record,\n            record_template=record_template or \"\",\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"input_value":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"fileTypes":[],"file_path":"","password":false,"name":"input_value","display_name":"Message","advanced":false,"input_types":["Text"],"dynamic":false,"info":"","load_from_db":false,"title_case":false},"record_template":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"{text}","fileTypes":[],"file_path":"","password":false,"name":"record_template","display_name":"Record Template","advanced":true,"dynamic":false,"info":"In case of Message being a Record, this template will be used to convert it to text.","load_from_db":false,"title_case":false,"input_types":["Text"]},"return_record":{"type":"bool","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":false,"fileTypes":[],"file_path":"","password":false,"name":"return_record","display_name":"Return Record","advanced":true,"dynamic":false,"info":"Return the message as a record containing the sender, sender_name, and session_id.","load_from_db":false,"title_case":false},"sender":{"type":"str","required":false,"placeholder":"","list":true,"show":true,"multiline":false,"value":"Machine","fileTypes":[],"file_path":"","password":false,"options":["Machine","User"],"name":"sender","display_name":"Sender Type","advanced":true,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"]},"sender_name":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"AI","fileTypes":[],"file_path":"","password":false,"name":"sender_name","display_name":"Sender Name","advanced":false,"dynamic":false,"info":"","load_from_db":false,"title_case":false,"input_types":["Text"]},"session_id":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"session_id","display_name":"Session ID","advanced":true,"dynamic":false,"info":"If provided, the message will be stored in the memory.","load_from_db":false,"title_case":false,"input_types":["Text"]},"_type":"CustomComponent"},"description":"Display a chat message in the Playground.","icon":"ChatOutput","base_classes":["object","Record","str","Text"],"display_name":"Chat Output","documentation":"","custom_fields":{"sender":null,"sender_name":null,"input_value":null,"session_id":null,"return_record":null,"record_template":null},"output_types":["Text","Record"],"field_formatters":{},"frozen":false,"field_order":[],"beta":false,"name":"Chat Output"},"id":"ChatOutput-LdF6G"},"selected":true,"width":384,"height":383,"dragging":false,"positionAbsolute":{"x":1548.5527954139595,"y":180.56390146461155}},{"id":"TextInput-ssbGS","type":"genericNode","position":{"x":352.666591923366,"y":901.2521980676727},"data":{"type":"TextInput","node":{"template":{"input_value":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"Nasuea, throwing up, weakness","fileTypes":[],"file_path":"","password":false,"name":"input_value","display_name":"Value","advanced":false,"input_types":["Record","Text"],"dynamic":false,"info":"Text or Record to be passed as input.","load_from_db":false,"title_case":false},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Optional\n\nfrom langflow.base.io.text import TextComponent\nfrom langflow.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Value\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"record_template":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"record_template","display_name":"Record Template","advanced":true,"dynamic":false,"info":"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.","load_from_db":false,"title_case":false,"input_types":["Text"]},"_type":"CustomComponent"},"description":"Get text inputs from the Playground.","icon":"type","base_classes":["object","str","Text"],"display_name":"Text Input","documentation":"","custom_fields":{"input_value":null,"record_template":null},"output_types":["Text"],"field_formatters":{},"frozen":false,"field_order":[],"beta":false,"name":"Text Input"},"id":"TextInput-ssbGS"},"selected":false,"width":384,"height":289,"positionAbsolute":{"x":352.666591923366,"y":901.2521980676727},"dragging":false},{"id":"TextInput-fyqhM","type":"genericNode","position":{"x":8.884300795126421,"y":654.2440795468275},"data":{"type":"TextInput","node":{"template":{"input_value":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"6/10","fileTypes":[],"file_path":"","password":false,"name":"input_value","display_name":"Value","advanced":false,"input_types":["Record","Text"],"dynamic":false,"info":"Text or Record to be passed as input.","load_from_db":false,"title_case":false},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Optional\n\nfrom langflow.base.io.text import TextComponent\nfrom langflow.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Value\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"record_template":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"record_template","display_name":"Record Template","advanced":true,"dynamic":false,"info":"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.","load_from_db":false,"title_case":false,"input_types":["Text"]},"_type":"CustomComponent"},"description":"Get text inputs from the Playground.","icon":"type","base_classes":["object","str","Text"],"display_name":"Text Input","documentation":"","custom_fields":{"input_value":null,"record_template":null},"output_types":["Text"],"field_formatters":{},"frozen":false,"field_order":[],"beta":false,"name":"Text Input"},"id":"TextInput-fyqhM"},"selected":false,"width":384,"height":289,"positionAbsolute":{"x":8.884300795126421,"y":654.2440795468275},"dragging":false},{"id":"TextInput-Cggfj","type":"genericNode","position":{"x":252.91466800329977,"y":355.64791594427993},"data":{"type":"TextInput","node":{"template":{"input_value":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"since last night","fileTypes":[],"file_path":"","password":false,"name":"input_value","display_name":"Value","advanced":false,"input_types":["Record","Text"],"dynamic":false,"info":"Text or Record to be passed as input.","load_from_db":false,"title_case":false},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Optional\n\nfrom langflow.base.io.text import TextComponent\nfrom langflow.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Value\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"record_template":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"record_template","display_name":"Record Template","advanced":true,"dynamic":false,"info":"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.","load_from_db":false,"title_case":false,"input_types":["Text"]},"_type":"CustomComponent"},"description":"Get text inputs from the Playground.","icon":"type","base_classes":["object","str","Text"],"display_name":"Text Input","documentation":"","custom_fields":{"input_value":null,"record_template":null},"output_types":["Text"],"field_formatters":{},"frozen":false,"field_order":[],"beta":false,"name":"Text Input"},"id":"TextInput-Cggfj"},"selected":false,"width":384,"height":289,"positionAbsolute":{"x":252.91466800329977,"y":355.64791594427993},"dragging":false},{"id":"TextInput-ouw0x","type":"genericNode","position":{"x":255.94610113632052,"y":32.800287277566014},"data":{"type":"TextInput","node":{"template":{"input_value":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"missed work","fileTypes":[],"file_path":"","password":false,"name":"input_value","display_name":"Value","advanced":false,"input_types":["Record","Text"],"dynamic":false,"info":"Text or Record to be passed as input.","load_from_db":false,"title_case":false},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Optional\n\nfrom langflow.base.io.text import TextComponent\nfrom langflow.field_typing import Text\n\n\nclass TextInput(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n\n    def build_config(self):\n        return {\n            \"input_value\": {\n                \"display_name\": \"Value\",\n                \"input_types\": [\"Record\", \"Text\"],\n                \"info\": \"Text or Record to be passed as input.\",\n            },\n            \"record_template\": {\n                \"display_name\": \"Record Template\",\n                \"multiline\": True,\n                \"info\": \"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.\",\n                \"advanced\": True,\n            },\n        }\n\n    def build(\n        self,\n        input_value: Optional[Text] = \"\",\n        record_template: Optional[str] = \"\",\n    ) -> Text:\n        return super().build(input_value=input_value, record_template=record_template)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":true,"dynamic":true,"info":"","load_from_db":false,"title_case":false},"record_template":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":true,"value":"","fileTypes":[],"file_path":"","password":false,"name":"record_template","display_name":"Record Template","advanced":true,"dynamic":false,"info":"Template to convert Record to Text. If left empty, it will be dynamically set to the Record's text key.","load_from_db":false,"title_case":false,"input_types":["Text"]},"_type":"CustomComponent"},"description":"Get text inputs from the Playground.","icon":"type","base_classes":["object","str","Text"],"display_name":"Text Input","documentation":"","custom_fields":{"input_value":null,"record_template":null},"output_types":["Text"],"field_formatters":{},"frozen":false,"field_order":[],"beta":false,"name":"Text Input"},"id":"TextInput-ouw0x"},"selected":false,"width":384,"height":289,"positionAbsolute":{"x":255.94610113632052,"y":32.800287277566014},"dragging":false}],"edges":[{"source":"OpenAIModel-QthHW","sourceHandle":"{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“OpenAIModelÅ“,Å“idÅ“:Å“OpenAIModel-QthHWÅ“}","target":"ChatOutput-LdF6G","targetHandle":"{Å“fieldNameÅ“:Å“input_valueÅ“,Å“idÅ“:Å“ChatOutput-LdF6GÅ“,Å“inputTypesÅ“:[Å“TextÅ“],Å“typeÅ“:Å“strÅ“}","data":{"targetHandle":{"fieldName":"input_value","id":"ChatOutput-LdF6G","inputTypes":["Text"],"type":"str"},"sourceHandle":{"baseClasses":["object","str","Text"],"dataType":"OpenAIModel","id":"OpenAIModel-QthHW"}},"style":{"stroke":"#555"},"className":"stroke-gray-900 stroke-connection","id":"reactflow__edge-OpenAIModel-QthHW{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“OpenAIModelÅ“,Å“idÅ“:Å“OpenAIModel-QthHWÅ“}-ChatOutput-LdF6G{Å“fieldNameÅ“:Å“input_valueÅ“,Å“idÅ“:Å“ChatOutput-LdF6GÅ“,Å“inputTypesÅ“:[Å“TextÅ“],Å“typeÅ“:Å“strÅ“}"},{"source":"Prompt-OKBJQ","sourceHandle":"{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“PromptÅ“,Å“idÅ“:Å“Prompt-OKBJQÅ“}","target":"OpenAIModel-QthHW","targetHandle":"{Å“fieldNameÅ“:Å“input_valueÅ“,Å“idÅ“:Å“OpenAIModel-QthHWÅ“,Å“inputTypesÅ“:[Å“TextÅ“],Å“typeÅ“:Å“strÅ“}","data":{"targetHandle":{"fieldName":"input_value","id":"OpenAIModel-QthHW","inputTypes":["Text"],"type":"str"},"sourceHandle":{"baseClasses":["object","str","Text"],"dataType":"Prompt","id":"Prompt-OKBJQ"}},"style":{"stroke":"#555"},"className":"stroke-gray-900 stroke-connection","id":"reactflow__edge-Prompt-OKBJQ{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“PromptÅ“,Å“idÅ“:Å“Prompt-OKBJQÅ“}-OpenAIModel-QthHW{Å“fieldNameÅ“:Å“input_valueÅ“,Å“idÅ“:Å“OpenAIModel-QthHWÅ“,Å“inputTypesÅ“:[Å“TextÅ“],Å“typeÅ“:Å“strÅ“}"},{"source":"TextInput-ssbGS","sourceHandle":"{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-ssbGSÅ“}","target":"Prompt-OKBJQ","targetHandle":"{Å“fieldNameÅ“:Å“symptomsÅ“,Å“idÅ“:Å“Prompt-OKBJQÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}","data":{"targetHandle":{"fieldName":"symptoms","id":"Prompt-OKBJQ","inputTypes":["Document","Record","Text"],"type":"str"},"sourceHandle":{"baseClasses":["object","str","Text"],"dataType":"TextInput","id":"TextInput-ssbGS"}},"style":{"stroke":"#555"},"className":"stroke-gray-900 stroke-connection","id":"reactflow__edge-TextInput-ssbGS{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-ssbGSÅ“}-Prompt-OKBJQ{Å“fieldNameÅ“:Å“symptomsÅ“,Å“idÅ“:Å“Prompt-OKBJQÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}"},{"source":"TextInput-fyqhM","sourceHandle":"{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-fyqhMÅ“}","target":"Prompt-OKBJQ","targetHandle":"{Å“fieldNameÅ“:Å“severityÅ“,Å“idÅ“:Å“Prompt-OKBJQÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}","data":{"targetHandle":{"fieldName":"severity","id":"Prompt-OKBJQ","inputTypes":["Document","Record","Text"],"type":"str"},"sourceHandle":{"baseClasses":["object","str","Text"],"dataType":"TextInput","id":"TextInput-fyqhM"}},"style":{"stroke":"#555"},"className":"stroke-gray-900 stroke-connection","id":"reactflow__edge-TextInput-fyqhM{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-fyqhMÅ“}-Prompt-OKBJQ{Å“fieldNameÅ“:Å“severityÅ“,Å“idÅ“:Å“Prompt-OKBJQÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}"},{"source":"TextInput-Cggfj","sourceHandle":"{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-CggfjÅ“}","target":"Prompt-OKBJQ","targetHandle":"{Å“fieldNameÅ“:Å“durationÅ“,Å“idÅ“:Å“Prompt-OKBJQÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}","data":{"targetHandle":{"fieldName":"duration","id":"Prompt-OKBJQ","inputTypes":["Document","Record","Text"],"type":"str"},"sourceHandle":{"baseClasses":["object","str","Text"],"dataType":"TextInput","id":"TextInput-Cggfj"}},"style":{"stroke":"#555"},"className":"stroke-gray-900 stroke-connection","id":"reactflow__edge-TextInput-Cggfj{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-CggfjÅ“}-Prompt-OKBJQ{Å“fieldNameÅ“:Å“durationÅ“,Å“idÅ“:Å“Prompt-OKBJQÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}"},{"source":"TextInput-ouw0x","sourceHandle":"{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-ouw0xÅ“}","target":"Prompt-OKBJQ","targetHandle":"{Å“fieldNameÅ“:Å“additional_infoÅ“,Å“idÅ“:Å“Prompt-OKBJQÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}","data":{"targetHandle":{"fieldName":"additional_info","id":"Prompt-OKBJQ","inputTypes":["Document","Record","Text"],"type":"str"},"sourceHandle":{"baseClasses":["object","str","Text"],"dataType":"TextInput","id":"TextInput-ouw0x"}},"style":{"stroke":"#555"},"className":"stroke-gray-900 stroke-connection","id":"reactflow__edge-TextInput-ouw0x{Å“baseClassesÅ“:[Å“objectÅ“,Å“strÅ“,Å“TextÅ“],Å“dataTypeÅ“:Å“TextInputÅ“,Å“idÅ“:Å“TextInput-ouw0xÅ“}-Prompt-OKBJQ{Å“fieldNameÅ“:Å“additional_infoÅ“,Å“idÅ“:Å“Prompt-OKBJQÅ“,Å“inputTypesÅ“:[Å“DocumentÅ“,Å“RecordÅ“,Å“TextÅ“],Å“typeÅ“:Å“strÅ“}"}],"viewport":{"x":363.5733754076542,"y":84.5007541420706,"zoom":0.5743491774985191}},"description":"Create, Curate, Communicate with Langflow.","name":"Smart Healthcare Advisor","last_tested_version":"0.0.11","is_component":false}